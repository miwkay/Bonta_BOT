import ast
import sqlite3
import logging
from datetime import datetime
import random
import requests
from bs4 import BeautifulSoup

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import BOT_TOKEN, id_admin
from keyboards import kb_user_main, kb_admin_main, ikb_user_catalog, kb_user_recipes, recipes_info

API_TOKEN = BOT_TOKEN
id_admin = id_admin

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


async def on_startup(_):
    print('Bot has been started!')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    hello = ["–ü—Ä–∏–≤—ñ—Ç", "Hello", "Hi", "Ciao", "Chin-Chin", "Ehi"]
    random_index = random.randint(0, len(hello) - 1)
    if message.from_user.id == id_admin:
        await message.answer(f"{hello[random_index]}, {message.from_user.first_name}!\n"
                             f"/start", reply_markup=kb_admin_main)
    else:
        con = sqlite3.connect('bonta_db.db')
        cur = con.cursor()
        cur.execute("SELECT user_id FROM users")
        db_users = cur.fetchall()
        if message not in db_users:
            cur.execute('INSERT or IGNORE INTO users\n'
                        '(user_id, username, first_name, last_name, date)\n'
                        'VALUES (?, ?, ?, ?, ?)', (message.from_user.id,
                                                   message.from_user.username,
                                                   message.from_user.first_name,
                                                   message.from_user.last_name,
                                                   datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        con.commit()
        cur.close()
        await message.answer(f"{hello[random_index]}, {message.from_user.full_name}!\n"
                             f"–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ –≤ –∞—Ä–º—ñ—ó —à–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤ —Å–º–∞—á–Ω–æ—ó –∫—É—Ö–Ω—ñ.\n"
                             f"bonta.com.ua\n"
                             f"/start", reply_markup=kb_user_main)


@dp.message_handler(Text(equals="–•—Ç–æ –∑–∞—Ö–æ–¥–∏–≤ üï∫"))
async def delete_data_list(message: types.Message):
    if message.from_user.id == id_admin:
        with sqlite3.connect('bonta_db.db', check_same_thread=False) as db:
            cur = db.cursor()
            cur.execute("SELECT user_id, username, first_name, last_name, date FROM users")
            data = cur.fetchall()
            num = 0
            for i in data:
                await message.answer(text=f'<b>{i[4]}</b>\n'
                                          f'user_id: {i[0]}\n'
                                          f'username: @{i[1]}\n'
                                          f'first_name: {i[2]}\n'
                                          f'last_name: {i[3]}\n',
                                     parse_mode="HTML", reply_markup=kb_admin_main)
                num += 1
            await message.answer(text=f'–í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ <b>{num}</b> –ª—é–¥–µ–π!', parse_mode="HTML")
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_user_main)


# –†–æ–∑—Å–∏–ª–∫–∞
class FormSupport(StatesGroup):
    mailing = State()


@dp.message_handler(Text(equals='–†–æ–∑—Å–∏–ª–∫–∞ üì®'))
async def mailing(message: types.Message):
    await FormSupport.mailing.set()
    await message.answer(text="<b>–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:</b>",
                         parse_mode="HTML",
                         reply_markup=kb_admin_main)


@dp.message_handler(state=FormSupport.mailing)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mailing'] = message.text
    with sqlite3.connect('bonta_db.db', check_same_thread=False) as db:
        cur = db.cursor()
        cur.execute("SELECT user_id FROM users")
        user_id = cur.fetchall()
        num_y = 0
        num_n = 0
    for i in user_id:
        try:
            await bot.send_message(i[0], md.text(data['mailing']), disable_notification=True)
            num_y += 1
        except:
            num_n += 1
    await message.answer(md.text(f'<b>{num_y}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ <b>–û–¢–†–ò–ú–ê–õ–ò</b> ‚úÖ\n'
                                 f'<b>{num_n}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ <b>–ù–ï –û–¢–†–ò–ú–ê–õ–ò</b> ‚õîÔ∏è\n'
                                 f'\n'
                                 f'<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n',
                                 data['mailing']),
                         parse_mode="HTML",
                         reply_markup=kb_admin_main)
    await state.finish()


# –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é –ø–æ–∫—É–ø—Ü—è –∑ —Ä–µ–∂–∏–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(Text(equals="–ú–µ–Ω—é –ø–æ–∫—É–ø—Ü—è üë§"))
async def mailing(message: types.Message):
    await message.answer(text="–ú–µ–Ω—é –ø–æ–∫—É–ø—Ü—è:",
                         reply_markup=kb_user_main)


# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
@dp.message_handler(Text(equals="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤  üóÇ"))
async def mailing(message: types.Message):
    await message.answer(text="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ <b>bonta.com.ua</b>:",
                         parse_mode="HTML",
                         reply_markup=ikb_user_catalog)


# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è / –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
@dp.message_handler(Text(equals="–ö–æ–Ω—Ç–∞–∫—Ç–∏  üìç"))
async def mailing(message: types.Message):
    await message.answer(text="<b>–Ü—Ç–∞–ª—ñ–π—Å—å–∫—ñ –°–º–∞–∫–æ–ª–∏–∫–∏!</b>\n"
                              "<em>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞:</em> –Ø–∫—É–±–æ–≤–∏—á –ö–∏—Ä–∏–ª–æ\n"
                              "<em>–ê–¥—Ä–µ—Å–∞:</em> –≤—É–ª. –§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞ 86, –æ—Ñ. 208–ë, –î–Ω—ñ–ø—Ä–æ, –£–∫—Ä–∞—ó–Ω–∞\n"
                              "<em>–¢–µ–ª–µ—Ñ–æ–Ω:</em> <b>+380 (67) 643-30-30 - –ì–∞—Ä—è—á–∞ –ª—ñ–Ω—ñ—è</b>\n"
                              "<em>–¢–µ–ª–µ—Ñ–æ–Ω:</em> <b>+380 (96) 896-93-98 - –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É –î–Ω—ñ–ø—Ä–æ</b>\n"
                              "<em>Email:</em> store1.bonta@gmail.com\n"
                              "<em>–°–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó:</em> <b>bonta.com.ua/ua</b>\n"
                              "\n"
                              "<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:</b>\n"
                              "09:00 - 17:00 –ü–æ–Ω–µ–¥—ñ–ª–æ–∫\n"
                              "09:00 - 17:00 –í—ñ–≤—Ç–æ—Ä–æ–∫\n"
                              "09:00 - 17:00 –°–µ—Ä–µ–¥–∞\n"
                              "09:00 - 17:00 –ß–µ—Ç–≤–µ—Ä\n"
                              "09:00 - 17:00 –ü º—è—Ç–Ω–∏—Ü—è\n"
                              "10:00 - 14:00 –°—É–±–æ—Ç–∞\n"
                              "–ù–µ–¥—ñ–ª—è - –í–∏—Ö—ñ–¥–Ω–∏–π",
                         parse_mode="HTML",
                         reply_markup=kb_user_main)


# –†–µ—Ü–µ–ø—Ç–∏
@dp.message_handler(Text(equals="–†–µ—Ü–µ–ø—Ç–∏  üìö"))
async def mailing(message: types.Message):
    await message.answer(text=recipes_info,
                         parse_mode="HTML",
                         reply_markup=kb_user_recipes)


# –Ü–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ –∫–æ–∂–Ω–∏–º —Å–º–∞–∫–æ–ª–∏–∫–æ–º
def kb(el):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton(f'–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞ {str(el[2])}', url=el[1])
    keyboard.add(button)
    return keyboard


# –ü–∞—Ä—Å—ñ–Ω–≥ / section = –ª—ñ–Ω–∫ –Ω–∞ —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
def get_pars(section):
    r = requests.get(f"{section}")
    soup = BeautifulSoup(r.text, 'lxml')
    items = soup.findAll('li', class_='cs-product-gallery__item cs-online-edit js-productad')
    data = []
    for item in items:
        name = item.find('a', class_='cs-goods-title').text
        link = 'https://bonta.com.ua/' + item.find('a', class_='cs-goods-title').get('href')
        price = item.find('span', class_='cs-goods-price__value cs-goods-price__value_type_current').text
        data.append([name, link, price])
    return data


@dp.callback_query_handler()
async def cbd_sauces(callback: types.CallbackQuery):
    if callback.data == 'sauces':
        data = get_pars('https://bonta.com.ua/ua/g108597487-sousy?product_items_per_page=48')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'groceries_and_condiments':
        data = get_pars('https://bonta.com.ua/ua/g108622037-bakaleya-pripravy')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'flour':
        data = get_pars('https://bonta.com.ua/ua/g112060733-muka')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'olive_oil':
        data = get_pars('https://bonta.com.ua/ua/g108693005-olivkovoe-maslo')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'canned_food':
        data = get_pars('https://bonta.com.ua/ua/g108618569-konservy')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'olives':
        data = get_pars('https://bonta.com.ua/ua/g112332508-olivki')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'sweet':
        data = get_pars('https://bonta.com.ua/ua/g108618568-sladosti')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'novelty':
        data = get_pars('https://bonta.com.ua/ua/g111149831-novinki')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'ready_sets':
        data = get_pars('https://bonta.com.ua/ua/g112064021-gotovye-nabory')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'gift_sets':
        data = get_pars('https://bonta.com.ua/ua/g112451341-podarochnye-nabory')
        for el in data:
            await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    if callback.data == 'pasta_and_risotto':
        r = requests.get("https://bonta.com.ua/ua/g108600624-pasta-rizotto")
        soup = BeautifulSoup(r.text, 'lxml')
        section = soup.findAll('li', class_='cs-product-groups-gallery__item cs-online-edit')
        for i in section:
            title = i.find('a', class_='cs-product-groups-gallery__title').text
            href = 'https://bonta.com.ua/' + i.find('a', class_='cs-product-groups-gallery__title').get('href')
            await callback.message.answer(text=f"<b>{title} üëá</b>", parse_mode="HTML")
            r = requests.get(f"{href}")
            soup = BeautifulSoup(r.text, 'lxml')
            items = soup.findAll('li', class_='cs-product-gallery__item cs-online-edit js-productad')
            data = []
            for item in items:
                name = item.find('a', class_='cs-goods-title').text
                link = 'https://bonta.com.ua/' + item.find('a', class_='cs-goods-title').get('href')
                price = item.find('span', class_='cs-goods-price__value cs-goods-price__value_type_current').text
                data.append([name, link, price])
            for el in data:
                await callback.message.answer(text=f'{el[1]}', reply_markup=kb(el))

    await callback.answer(text='–ì–æ—Ç–æ–≤–æ!')


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–í–∏–±–∞—á, —è —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é..")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

#     question = State()  # –ó–∞–ø–∏—Ç–∞—Ç–∏

# @dp.message_handler(Text(equals='–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìú'))
# async def mailing(message: types.Message):
#     await FormSupport.mailing.set()
#     await message.answer(text="<b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>",
#                          parse_mode="HTML",
#                          reply_markup=kb_user_main)
#
#
# @dp.message_handler(state=FormSupport.mailing)
# async def process_name(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['mailing'] = message.text
#     await message.answer(text='–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥—è–∫—É—î–º–æ —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å.',
#                          disable_notification=True)
#     await bot.send_message(id_admin, md.text(f'<b>@{message.from_user.username}\n'
#                                              f'{message.from_user.first_name} {message.from_user.last_name}\n'
#                                              f'–ó–∞–ª–∏—à–∏–≤ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n',
#                                              data['mailing']),
#                            parse_mode="HTML",
#                            reply_markup=kb_user_main)
#     await state.finish()
